"""
    复习 - 面向对象语法
        1. 思考流程:
            客观事物 -抽象化-> 类 -具体化-> 对象
        2. 类和对象
            class 类名:
                def __init__(self,参数):
                    self.实例变量 = 参数

                def 实例方法(self):
                    self.实例变量

            对象名 = 类名(数据)
            对象名.实例变量
            对象名.实例方法() # 实例方法(对象名)

        3. 封装
            封装数据：使用一种自定义类型包装多种基础类型
                class 自定义类:
                    def __init__(self,参数1,参数2,参数3):
                        self.数据1=参数1
                        self.数据2=参数2
                        self.数据3=参数3
            封装行为：隐藏细节,提供简单的调用方式
                私有化:以双下划线命名
        4.继承
            继承行为:子类可以直接使用父类方法
                class 爸爸:
                    def 方法1(self):
                        pass
                class 儿子(爸爸):
                    def 方法2(self):
                        self.方法1()

                儿子().方法1()
            继承数据:子类构造函数内必须通过super()调用父类构造函数
                class 爸爸:
                    def __init__(self,参数1):
                        self.数据1 = 参数1

                class 大儿子(爸爸):
                    pass

                class 小儿子(爸爸):
                    # 子类构造函数参数:父类+子类
                    def __init__(self,参数1,参数2):
                        super().__init__(参数1)
                        self.数据2 = 参数2

                # 子类若没有构造函数,直接使用父类
                儿子1 = 大儿子(数据1)
                # 子类若有构造函数,覆盖父类构造函数
                儿子2 = 小儿子(数据1,数据2)
                print(儿子2.数据1)
        5. 多态
            重写：子类具有和父类相同的方法
            作用：子类改变父类行为
            语法：
                class 自定义类(object):
                    def __str__(self)：
                        return "格式"

                    # 默认根据地址比较
                    #def __eq__(self,other):
                    #    return id(self) ==id(other)

                    # 默认根据内容比较
                    def __eq__(self,other):
                        return self.实例变量 ==other.实例变量

                对象名 = 自定义类()
                # 不重写打印内存地址....
                # 重写后打印自定义格式....
                print(对象名) # 一定自动执行__str__

                自定义对象列表 = [
                    自定义类(),
                    自定义类(),
                    自定义类(),
                    自定义类(),
                ]
                # 内部循环调用__eq__方法
                # 列表[0].__eq__(对象名)
                # 列表[1].__eq__(对象名)
                # 列表[2].__eq__(对象名)
                自定义对象列表.remove(对象名)
                对象名 in 自定义对象列表
"""